{
  "name": "grunt-ec2",
  "description": "Grunt tasks to create, terminate, and deploy to AWS EC2 instances",
  "homepage": "https://github.com/bevacqua/grunt-ec2",
  "author": {
    "name": "Nicolas Bevacqua",
    "email": "ng@bevacqua.io",
    "url": "http://bevacqua.io"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/bevacqua/grunt-ec2.git"
  },
  "version": "0.9.3",
  "licenses": "MIT",
  "keywords": [
    "gruntplugin",
    "aws",
    "ec2",
    "deploy",
    "release",
    "rsync",
    "ssh",
    "nginx"
  ],
  "engines": {
    "node": "0.10.18",
    "npm": "1.2.x"
  },
  "dependencies": {
    "async": "~0.2.9",
    "aws-sdk": "2.0.0-rc9",
    "chalk": "~0.4.0",
    "fs-extra": "~0.8.1",
    "grunt": "~0.4.1",
    "lodash": "~2.4.1",
    "mkdirp": "~0.3.5",
    "moment": "~2.5.0",
    "mustache": "~0.8.1",
    "ssh2": "~0.2.15"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.8.0",
    "jshint-stylish": "~0.1.5",
    "load-grunt-tasks": "~0.2.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "readme": "# grunt-ec2 [![Build Status](https://travis-ci.org/bevacqua/grunt-ec2.png?branch=master)](https://travis-ci.org/bevacqua/grunt-ec2) [![Dependency Status](https://gemnasium.com/bevacqua/grunt-ec2.png)](https://gemnasium.com/bevacqua/grunt-ec2) [![help me on gittip](http://gbindex.ssokolow.com/img/gittip-43x20.png)](https://www.gittip.com/bevacqua/) [![flattr.png][6]](https://flattr.com/submit/auto?user_id=nzgb&url=https%3A%2F%2Fgithub.com%2Fbevacqua%2Fgrunt-ec2) ![ga](https://ga-beacon.appspot.com/UA-35043128-6/grunt-ec2/readme?pixel)\n\n> Grunt tasks to create, terminate, and deploy Node applications to AWS EC2 instances, then proxy with nginx\n\nAbstracts away [**aws-sdk**](https://github.com/aws/aws-sdk-js) allowing you to easily launch, terminate, and deploy to AWS EC2 instances.\n\nNote: This is a _very_, _**very**_ opinionated package. You're invited to fork it and produce your own flow, and definitely encouraged to create pull requests with your awesome improvements.\n\nJump to the [**task reference**](https://github.com/bevacqua/grunt-ec2#complete-task-reference) to see what it can do.\n\n# Features\n\nThis is pretty feature packed\n\n- Launch EC2 instances and set them up with a single task. Look ma', no hands!\n- Shut them down from the console. No need to look up an id or anything.\n- Use individual SSH key-pairs for each different instance, for increased security\n- Deploy with a single Grunt task, using `rsync` for speed\n- Use `pm2` to deploy and do hot code swaps!\n- Works after reboots, too\n- [Introduced at Pony Foo](http://blog.ponyfoo.com/2013/09/19/deploying-node-apps-to-aws-using-grunt \"Deploying Node apps to AWS using Grunt\")\n- Put an `nginx` proxy server in front of Node\n- Get tons of Grunt tasks to manipulate your EC2 instances\n- Supports turning on `ssl` and `spdy` in your `nginx` server!\n\n# Installation\n\n```shell\nnpm install --save-dev grunt-ec2\n```\n\nYou'll need to set up the AWS configuration for the project. You'll also need to have a **Security Group** set up on AWS. Make sure to enable rules for inbound SSH (port 22) and HTTP (port 80) traffic.\n\n# Setup\n\n```js\ngrunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    ec2: 'path/to/whatever.json'\n});\n\ngrunt.loadNpmTasks('grunt-ec2');\n```\n\nThen, in your `whatever.json` file:\n\n```json\n{\n  \"AWS_ACCESS_KEY_ID\": \"<redacted>\",\n  \"AWS_SECRET_ACCESS_KEY\": \"<redacted>\",\n  \"AWS_SECURITY_GROUP\": \"something\"\n}\n```\n\nYou'll need to get an access key pair for AWS, as well as create a security group on AWS by hand. Creating security groups is not supported by this package yet.\n\nThe `package.json` entry is used to take the `version` number when deploying.\n\nFor the `ec2` configuration, I don't take an object directly to _encourage hiding away_ the deployment variables, granting them only to people who can actually perform deploys. You _could_ provide an object directly, but **it's strongly discouraged**.\n\n# Configuration\n\nIf you're confident enough, you can use the tool with just those options. Here is the full set of options and their defaults.\n\nVariable Name|Purpose\n---|---\n`\"AWS_DEFAULT_REGION\"`|Passed to the CLI directly, defaults to `\"us-east-1\"`\n`\"AWS_ELB_NAME\"`|The default Elastic Load Balancer you want to use with `ec2_elb_attach` and `ec2_elb_detach`.\n`\"AWS_IMAGE_ID\"`|Used when creating a new instance with the `ec2_create_instance` task. Defaults to the `\"ami-c30360aa\"` [Ubuntu AMI](http://cloud-images.ubuntu.com/releases/raring/release-20130423/ \"Ubuntu 13.04 (Raring Ringtail)\").\n`\"AWS_INSTANCE_TYPE\"`|The magnitude for our instance. Defaults to `\"t1.micro\"`. Used when creating instances.\n`\"AWS_RSYNC_USER\"`|The user to SSH into the instance when deploying through `rsync`.\n`\"AWS_SECURITY_GROUP\"`|The security group used for new instances. You'll have to create this one yourself.\n`\"AWS_SSH_USER\"`|The user used to SSH into the instance when setting it up for the first time, after creating it.\n`\"ELASTIC_IP\"`|Assign an AWS Elastic IP to new instances, and release it when terminating them. Defaults to `true`.\n`\"ENV\"`| Provided as a JSON object. Variables to set in the local environment before the app starts. Useful for setting up DB credentials for example.\n`\"NGINX_ENABLED\"`|Whether to install and use `nginx`. If installed, the Node application **must** listen on port `NGINX_PROXY_PORT`. Keep in mind that since we're going to use `pm2` to spin up a cluster, a single port won't be an issue anyways.\n`\"NGINX_PROXY_PORT\"`|This is the port where `nginx` will proxy requests to, when it won't handle them by itself. This is the same port you'll want to use to listen with your Node application.\n`\"NGINX_SERVER_NAME\"`|The server name for your static server, for example: `bevacqua.io`.\n`\"NGINX_STATIC_ERRORS\"`|The relative path to your error HTML views folder root. For example `bin/views/error`.\n`\"NGINX_STATIC_ROOT\"`|The relative path to your static folder root, for example: `bin/public`. Used to serve static assets through `nginx`.\n`\"NGINX_USER\"`|The user to configure and run `nginx` with.\n`\"NGINX_WORKERS\"`|The amount of workers processes used by `nginx`.\n`\"NODE_SCRIPT\"`|The path to your script. Defaults to `app.js`, as in `node app.js`. Relative to your `cwd`.\n`\"NPM_INSTALL_DISABLED\"`|If `true`, won't `npm install --production` after deployments\n`\"NPM_REBUILD\"`|If `true`, will `npm rebuild` after deployments\n`\"PAGESPEED_API_KEY\"`|If provided, will run [Google PageSpeed insights](https://developers.google.com/speed/docs/insights/) on every deployment. Get [**an API Key here**](https://developers.google.com/speed/docs/insights/v1/getting_started#auth). Requires you to setup `grunt-pagespeed` locally, in your own `Gruntfile.js`.\n`\"PROJECT_ID\"`|Just an identifier for your project, in case you're hosting multiple ones, for some stupid reason, in the same instance. Defaults to `ec2`. This is used when creating folders inside the instance.\n`\"RSYNC_EXCLUDE_FROM\"`|Relative path to an rsync exclusion patterns file. These are used to exclude files from being uploaded to the server during `rsync` on deploys. Defaults to ignoring `.git` and `node_modules`.\n`\"RSYNC_EXCLUDES\"`|An array of file patterns to explicitly exclude during deploys. The `%NODE_ENV%` string will be replaced by the name tag. Unset by default.\n`\"RSYNC_INCLUDE_FROM\"`|Relative path to an rsync inclusion patterns file. These are used to include files for upload to the server during `rsync` on deploys. Unset by default.\n`\"RSYNC_INCLUDES\"`|An array of file patterns to explicitly include during deploys. The `%NODE_ENV%` string will be replaced by the name tag. Useful for uploading environment configuration.\n`\"SSH_KEYS_FOLDER\"`|The relative path to a folder where you want to use with tasks that create SSH key-pairs. It doesn't need to exist, `mkdir -p` will take care of that. This defaults to a folder inside this package, which is pretty lame if you want to look at the key-pairs yourself. Although you _shouldn't need to_, I've got you covered.\n`\"SSL_CERTIFICATE\"`|Relative path to your unified SSL certificate.\n`\"SSL_CERTIFICATE_KEY\"`|Relative path to your private certificate key.\n`\"SSL_ENABLED\"`|Enables SSL configuration on `nginx`. Learn [how to set it up](https://konklone.com/post/switch-to-https-now-for-free) for free.\n`\"SSL_STRICT\"`|Whether to send a `Strict-Transport-Security` header.\n`\"VERBOSITY_NPM\"`|Determines the output verbosity for `npm` during deployments, values are limited to `loglevel` option values for `npm`. Defaults to `info`, just like `npm` does.\n`\"VERBOSITY_RSYNC\"`|Determines the output verbosity for `rsync`. Possible values limited to `'v'`, `'vv'`, and `'vvv'`. Defaults to `''` (not verbose at all, my friend).\n\n# Tasks\n\nAlthough this package exposes quite a few different tasks, here are the ones you'll want to be using directly.\n\n## Launch an EC2 instance `ec2_launch:name`\n\nLaunches an instance and sets it up.\n\n- Creates an SSH key-pair\n- Uploads the public key to AWS\n- Creates an AWS EC2 instance\n- Tags the instance with the friendly name you provided\n- Pings the instance until it warms up a DNS and provides SSH access (typically takes a minute)\n- Sets up the instance, installing Node, `npm`, and `pm2`\n\n#### Example:\n\n```shell\ngrunt ec2_launch:teddy\n```\n\n![ec2-launch.png][3]\n\n## Shutdown an EC2 instance `ec2_shutdown:name`\n\nTerminates an instance and deletes related objects\n\n- Looks up the id of an instance tagged `name`\n- Terminates the AWS EC2 instance\n- Deletes the key-pair associated with the instance\n\n#### Example:\n\n```shell\ngrunt ec2_shutdown:teddy\n```\n\n![ec2-shutdown.png][2]\n\n## List running EC2 instances `ec2_list_json`\n\nReturns a JSON list of running EC2 instances. Defaults to filtering by `running` state. You can use `ec2_list_json:all` to remove the filter, or pick another `instance-state-name` to filter by.\n\n![ec2-list.png][5]\n\n## Describe an instance with `ec2_lookup`\n\nSimilar to `ec2_list_json`, but lets you get the properties of an instance by name, rather than state. Try it with `grunt ec2_lookup:staging`.\n\n## Get an SSH connection command for an instance `ec2_ssh_text:name`\n\nGives you a command you can copy and paste to connect to an EC2 instance through SSH. Useful to get down and dirty.\n\n```shell\ngrunt ec2_ssh_text:teddy\n```\n\n![ec2-ssh.png][1]\n\n## Deploy to an EC2 instance `ec2_deploy`\n\nDeploys to a running EC2 instance using `rsync` over SSH.\n\n- Connects to the instance through SSH\n- Uploads `cwd` to an `rsync` folder such as `/srv/rsync/example/latest`\n- Only transmits changes, similar to how `git` operates\n- Using `pkg.version`, creates a folder with the newest version, like `/srv/apps/example/v/0.6.5`\n- Creates a link from `/srv/apps/example/v/0.6.5` to `/srv/apps/example/current`\n- Either starts the application, or reloads it with zero downtime, using `pm2`\n- Instance name can be accessed through `process.env.NODE_ENV`\n\nExample:\n\n```shell\ngrunt ec2_deploy:teddy\n```\n\n![ec2-deploy.png][4]\n\n## Deploy to multiple EC2 instances `ec2_deploy_many`\n\nQueries EC2 for instances that match the given name and deploys to each on using `ec2_deploy`.\n\nExample:\n\n```shell\ngrunt ec2_deploy_many:teddy*\n```\n\n## Reboot an instance with `ec2_reboot`\n\nReboots the instance by the specified name.\n\n- Looks up instance id for instance tagged `name`.\n- Reboots it\n\nExample:\n\n```shell\ngrunt ec2_reboot:teddy\n```\n\n# Complete Task Reference\n\nTask and Target(s)|Purpose\n---|---\n`ec2_assign_address:id`|Allocates an IP and assigns it to your instance\n`ec2_assign_existing_address:id:ip`|Assigns an IP address to an instance without allocating a new one\n`ec2_create_keypair:name`|Generates an RSA key pair and uploads the public key to AWS\n`ec2_create_tag:id:name`|Tags an instance with the provided name\n`ec2_delete_keypair:name`|Removes the remote and the local copies of the RSA key\n`ec2_delete_tag:id`|Deletes the associated name tag for an instance\n`ec2_rename_tag:old:replacement`|Tags an instance using a different name\n`ec2_deploy:name`|Deploys to the instance using `rsync`, reloads `pm2` and `nginx`\n`ec2_deploy_many:name`|Gets instances filtered by name tag and deploys to the instance using `rsync`, reloads `pm2` and `nginx`\n`ec2_elb_attach:instance-name:elb-name?`|Attaches an instance to an ELB\n`ec2_elb_detach:instance-name:elb-name?`|Detaches an instance from an ELB\n`ec2_launch:name`|Creates a new instance, giving it a key-pair, a name tag, and an IP. Then sets it up\n`ec2_list:state`|Lists instances filtered by state. Defaults to `running` filter, use `all` to disable filter.\n`ec2_list_json:state`|Lists instances filtered by state. Defaults to `running` filter, use `all` to disable filter. Prints results in JSON\n`ec2_logs_nginx_access:name`|Gets `nginx` access logs\n`ec2_logs_nginx_error:name`|Gets `nginx` error logs\n`ec2_logs_node:name`|Gets `pm2` logs\n`ec2_lookup:name`|Gets instance filtered by name tag\n`ec2_lookup_json:name`|Gets instance filtered by name tag. Prints results in JSON\n`ec2_nginx_configure:name`|Installs `nginx` if necessary, updates its configuration files\n`ec2_nginx_reload:name`|Reloads `nginx`\n`ec2_nginx_restart:name`|Restarts `nginx`\n`ec2_nginx_start:name`|Starts `nginx`\n`ec2_nginx_stop:name`|Stops `nginx`\n`ec2_node_list:name`|Returns output for `pm2 list`\n`ec2_node_monit:name`|Runs `pm2 monit`\n`ec2_node_reload:name`|Reloads app using `pm2 reload all`\n`ec2_node_restart:name`|Restarts app using `pm2 restart all`\n`ec2_node_start:name`|Starts app using parameterized `pm2 start`\n`ec2_node_stop:name`|Stops app using `pm2 stop all`\n`ec2_pagespeed:ip`|Requests the Google PageSpeed API, prints insights\n`ec2_pm2_update:name`|Updates `pm2` on an instance, using `npm update -g pm2`\n`ec2_reboot:name`|Reboots the EC2 instance\n`ec2_release_address:ip`|Releases an IP address\n`ec2_run_instance:name`|Spins up an EC2 instance, gives a name tag and assigns an IP\n`ec2_setup:name`|Sets up port forwarding, installs `rsync`, `node`, and `pm2`, enqueues `ec2_nginx_configure`\n`ec2_shutdown:name`|Terminates an instance, deleting its associated key-pair, IP address, and name tag\n`ec2_ssh:name`|Establishes an `ssh` connection to the instance, you can emit commands to your EC2 instance\n`ec2_ssh_text:name`|Displays a verbose command with which you can establish an `ssh` connection to the instance\n`ec2_terminate_instance:id`|Terminates an instance\n`ec2_version:name`|Get the version number currently deployed to EC2\n`ec2_wait:id`|Waits for an instance to report a public DNS and be accessible through `ssh`\n\n## Feedback\n\nEnjoy it. Submit any [issues](https://github.com/bevacqua/grunt-ec2/issues \"GitHub issues for grunt-ec2\") you encounter, and send any feedback you might have my way.\n\n  [1]: http://i.imgur.com/VRDBk9a.png \"SSH just became easier than ever\"\n  [2]: http://i.imgur.com/U0gN4ax.png \"Shutting down an instance through Grunt\"\n  [3]: http://i.imgur.com/CSRhe2b.png \"Launching an instance single-handedly using Grunt\"\n  [4]: http://i.imgur.com/0yH3E5k.png \"Deploy from your command-line!\"\n  [5]: http://i.imgur.com/ecFsa4b.png \"List all instances with `grunt ec2_list_json`\"\n  [6]: https://api.flattr.com/button/flattr-badge-large.png\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/bevacqua/grunt-ec2/issues"
  },
  "_id": "grunt-ec2@0.8.1",
  "dist": {
    "shasum": "1353b6b282e2a87ca8499fa949c94eaf807b100f"
  },
  "_from": "https://github.com/kciccarello/grunt-ec2/archive/master.tar.gz",
  "_resolved": "https://github.com/kciccarello/grunt-ec2/archive/master.tar.gz"
}
